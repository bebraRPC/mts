version: "3"


services:
  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=user
      - MINIO_ROOT_PASSWORD=password
      - MINIO_SERVER_URL=https://minio:9000
      - MINIO_BROWSER_REDIRECT_URL=https://minio:9000
    volumes:
      - minio_storage:/data
    networks:
      mynetwork:
    command: server --address ":9000" --console-address ":9001" /data

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - mynetwork

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    depends_on:
      - zookeeper
    networks:
      - mynetwork

  postgres:
    container_name: postgres
    image: postgres
    volumes:
      - pg-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: 'user'
      POSTGRES_PASSWORD: 'password'
      POSTGRES_DB: 'postgres'
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d postgres" ]
      interval: 1s
      timeout: 2s
      retries: 2
    networks:
      - mynetwork

  gate:
    build:
      context: .
      dockerfile: ./internal/gate/Dockerfile
    container_name: gate
    environment:
      PG_URL: 'postgres://user:password@postgres:5432/postgres'
      KAFKA_BROKER: 'kafka:9092'
    ports:
      - 8080:8080
    volumes:
      - ./config:/config
    networks:
      - mynetwork
    depends_on:
      - postgres
      - minio
      - kafka
      - zookeeper


  worker:
    build:
      context: .
      dockerfile: ./internal/worker/Dockerfile
    container_name: worker
    volumes:
      - ./config:/config
    networks:
      - mynetwork
    depends_on:
      - minio
      - zookeeper
      - kafka
      - postgres


volumes:
  pg-data:
  gate:
  worker:
  minio_storage:
  postgres_data:
  zookeeper:

networks:
  mynetwork: